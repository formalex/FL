/* Generated By:JavaCC: Do not edit this line. FLParserConstants.java */
package ar.uba.dc.formalex.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SECTION_BG_THEORY = 6;
  /** RegularExpression Id. */
  int SECTION_CLAUSES = 7;
  /** RegularExpression Id. */
  int ACTION = 8;
  /** RegularExpression Id. */
  int ACTIONS = 9;
  /** RegularExpression Id. */
  int IMPERSONAL_ACTION = 10;
  /** RegularExpression Id. */
  int TIMER = 11;
  /** RegularExpression Id. */
  int LOCAL_INTERVAL = 12;
  /** RegularExpression Id. */
  int GLOBAL_INTERVAL = 13;
  /** RegularExpression Id. */
  int INFINITE = 14;
  /** RegularExpression Id. */
  int DEFINED_BY = 15;
  /** RegularExpression Id. */
  int ONLY_OCCURS_IN = 16;
  /** RegularExpression Id. */
  int OCCURRENCES = 17;
  /** RegularExpression Id. */
  int OUTPUT_VALUES = 18;
  /** RegularExpression Id. */
  int PERFORMABLE = 19;
  /** RegularExpression Id. */
  int ROLES = 20;
  /** RegularExpression Id. */
  int ROLES_DISJOINT = 21;
  /** RegularExpression Id. */
  int ROLES_COVER = 22;
  /** RegularExpression Id. */
  int SYNC = 23;
  /** RegularExpression Id. */
  int ALLOW_AUTOSYNC = 24;
  /** RegularExpression Id. */
  int DISALLOW_AUTOSYNC = 25;
  /** RegularExpression Id. */
  int LOCAL_COUNTER = 26;
  /** RegularExpression Id. */
  int GLOBAL_COUNTER = 27;
  /** RegularExpression Id. */
  int COUNTER_INCREASES = 28;
  /** RegularExpression Id. */
  int COUNTER_DECREASES = 29;
  /** RegularExpression Id. */
  int COUNTER_BY = 30;
  /** RegularExpression Id. */
  int COUNTER_PROVIDED = 31;
  /** RegularExpression Id. */
  int COUNTER_RESET = 32;
  /** RegularExpression Id. */
  int COUNTER_SETS_WITH = 33;
  /** RegularExpression Id. */
  int COUNTER_TO_VALUE = 34;
  /** RegularExpression Id. */
  int COUNTER_INIT_VALUE = 35;
  /** RegularExpression Id. */
  int COUNTER_MIN_VALUE = 36;
  /** RegularExpression Id. */
  int COUNTER_MAX_VALUE = 37;
  /** RegularExpression Id. */
  int COUNTER_MIN_IMPEED_ACTIONS = 38;
  /** RegularExpression Id. */
  int COUNTER_MAX_IMPEED_ACTIONS = 39;
  /** RegularExpression Id. */
  int PAR_LEFT = 40;
  /** RegularExpression Id. */
  int PAR_RIGHT = 41;
  /** RegularExpression Id. */
  int BRA_LEFT = 42;
  /** RegularExpression Id. */
  int BRA_RIGHT = 43;
  /** RegularExpression Id. */
  int BKT_LEFT = 44;
  /** RegularExpression Id. */
  int BKT_RIGHT = 45;
  /** RegularExpression Id. */
  int DOT = 46;
  /** RegularExpression Id. */
  int DOUBLE_DOT = 47;
  /** RegularExpression Id. */
  int ML_DIAMOND = 48;
  /** RegularExpression Id. */
  int ML_BOX = 49;
  /** RegularExpression Id. */
  int ML_AND = 50;
  /** RegularExpression Id. */
  int ML_OR = 51;
  /** RegularExpression Id. */
  int ML_THEN = 52;
  /** RegularExpression Id. */
  int ML_NOT = 53;
  /** RegularExpression Id. */
  int OBLIGATION = 54;
  /** RegularExpression Id. */
  int FORBIDDEN = 55;
  /** RegularExpression Id. */
  int PERMISSION = 56;
  /** RegularExpression Id. */
  int OCCURRED = 57;
  /** RegularExpression Id. */
  int RESULTS_IN = 58;
  /** RegularExpression Id. */
  int REPAIRED_BY = 59;
  /** RegularExpression Id. */
  int INSIDE = 60;
  /** RegularExpression Id. */
  int EXISTS = 61;
  /** RegularExpression Id. */
  int FORALL = 62;
  /** RegularExpression Id. */
  int EQUAL = 63;
  /** RegularExpression Id. */
  int LESS = 64;
  /** RegularExpression Id. */
  int GREATER = 65;
  /** RegularExpression Id. */
  int LEQ = 66;
  /** RegularExpression Id. */
  int GEQ = 67;
  /** RegularExpression Id. */
  int START_RAW_TEXT = 68;
  /** RegularExpression Id. */
  int END_RAW_TEXT = 69;
  /** RegularExpression Id. */
  int RAW_TEXT = 70;
  /** RegularExpression Id. */
  int IDENTIFIER = 71;
  /** RegularExpression Id. */
  int NUMBER = 72;
  /** RegularExpression Id. */
  int MINUS = 73;
  /** RegularExpression Id. */
  int UNDERSCORE = 74;
  /** RegularExpression Id. */
  int INT_NUMBER = 75;
  /** RegularExpression Id. */
  int LETTER = 76;
  /** RegularExpression Id. */
  int DIGIT = 77;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_RAW_TEXT_MODE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"#Background\"",
    "\"#Clauses\"",
    "\"action\"",
    "\"actions\"",
    "\"impersonal action\"",
    "\"timer\"",
    "\"local interval\"",
    "\"global interval\"",
    "\"infinite\"",
    "\"defined by actions\"",
    "\"only occurs in scope\"",
    "\"occurrences\"",
    "\"output values\"",
    "\"only performable by\"",
    "\"roles\"",
    "\"disjoint\"",
    "\"cover\"",
    "\"synchronizes with\"",
    "\"allow autosync\"",
    "\"disallow autosync\"",
    "\"local counter\"",
    "\"global counter\"",
    "\"increases with action\"",
    "\"decreases with action\"",
    "\"by\"",
    "\"provided that\"",
    "\"resets with action\"",
    "\"sets with action\"",
    "\"to value\"",
    "\"init value\"",
    "\"min value\"",
    "\"max value\"",
    "\"reach min impeed actions\"",
    "\"reach max impeed actions\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\":\"",
    "\"<>\"",
    "\"[]\"",
    "\"&\"",
    "\"|\"",
    "\"->\"",
    "\"!\"",
    "\"O(\"",
    "\"F(\"",
    "\"P(\"",
    "\"occurred\"",
    "\"results in\"",
    "\"repaired by\"",
    "\"inside\"",
    "\"EXISTS(\"",
    "\"FORALL(\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"%\"",
    "\"%\"",
    "<RAW_TEXT>",
    "<IDENTIFIER>",
    "<NUMBER>",
    "\"-\"",
    "\"_\"",
    "<INT_NUMBER>",
    "<LETTER>",
    "<DIGIT>",
    "\",\"",
    "\";\"",
  };

}
