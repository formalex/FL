/* Generated By:JavaCC: Do not edit this line. FLParser.java */
package ar.uba.dc.formalex.parser;

import java.util.*;
import ar.uba.dc.formalex.fl.FLInput;
import ar.uba.dc.formalex.fl.bgtheory.*;
import ar.uba.dc.formalex.fl.bgtheory.Timer; //necesario para desambiguar
import ar.uba.dc.formalex.fl.regulation.formula.terminals.*;
import ar.uba.dc.formalex.fl.regulation.permission.*;
import ar.uba.dc.formalex.fl.regulation.rules.*;
import ar.uba.dc.formalex.fl.regulation.formula.connectors.*;
import ar.uba.dc.formalex.fl.regulation.formula.FLFormula;

public class FLParser implements FLParserConstants {

    private static Map<String, Action> actions = new HashMap <String, Action> ();
    private static Map<String, Interval> intervals = new HashMap<String, Interval> ();
    private static Map<String, Counter> counters = new HashMap<String, Counter> ();
    private static Map<String, Role> rolesMap = new HashMap<String, Role> ();
    private static FLInput flInput = new FLInput();
    private static String originalFormula; //usado para logueo

    public static void clean(){

        actions = new HashMap <String, Action> ();
        intervals = new HashMap<String, Interval> ();
        counters = new HashMap<String, Counter> ();
        rolesMap = new HashMap<String, Role> ();
        flInput = new FLInput();

    }

    public static FLInput getFLInput(){
        return flInput;
    }

  private static FLFormula parsearFlAction(String variable, String name, FLFormula aFormula , int beginLine, int beginColumn)
  {
    Action tmp = actions.get(name);
    if (tmp == null)
    {
      StringBuilder sb = new StringBuilder();
      sb.append("En una f\u00f3rmula se hace referencia a una acci\u00f3n no definida: ('" + name + "'). " +
      "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
      throw new RuntimeException(sb.toString());
    }
    if (!tmp.isImpersonal() & variable == null)
    {
      StringBuilder sb = new StringBuilder();
      sb.append("En una f\u00f3rmula se hace referencia a una acci\u00f3n sin usar agente: ('" + name + "'). " +
      "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
      throw new RuntimeException(sb.toString());
    }
    if (tmp.isImpersonal() & variable != null)
    {
      StringBuilder sb = new StringBuilder();
      sb.append("En una f\u00f3rmula se hace referencia a una acci\u00f3n impersonal usando agente: ('" + name + "'). " +
      "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
      throw new RuntimeException(sb.toString());
    }
    aFormula = new FLAction(variable, name);
    return aFormula;
  }

    private static Interval getInterval(String name){
        Interval res = intervals.get(name);
        if (res ==  null){
            StringBuilder sb = new StringBuilder();
            sb.append("Se est\u00e1 haciendo referencia a un intervalo no definido ('" + name + "'). Revisar datos del archivo de entrada");
            throw new RuntimeException(sb.toString());
        }
        return res;
    }

    public static Action getAction(String name){
        Action res = actions.get(name);
        if (res ==  null){
            StringBuilder sb = new StringBuilder();
            sb.append("Se est\u00e1 haciendo referencia a una acci\u00f3n no definida ('" + name + "'). Revisar datos del archivo de entrada");
            throw new RuntimeException(sb.toString());
        }
        return res;
    }

    public static Role getRole(String name){
        //parche x rol dummy
        if (name.equals("no_assigned_role")){
            return new Role("no_assigned_role");
        }

        Role res = rolesMap.get(name);
        if (res ==  null){
            StringBuilder sb = new StringBuilder();
            sb.append("Se est\u00e1 haciendo referencia a un rol no definido ('" + name + "'). Revisar datos del archivo de entrada");
            throw new RuntimeException(sb.toString());
        }
        return res;
    }

// *********************** //
// PRODUCTIONs definitions //
// *********************** //
// MAIN production (S)
  static final public void start() throws ParseException {
    jj_consume_token(SECTION_BG_THEORY);
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      roles();
    }
    label_2:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_2;
      }
      bg_theory();
    }
    jj_consume_token(SECTION_CLAUSES);
    label_3:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_3;
      }
      clause();
    }
    jj_consume_token(0);

  }

///////////////////////
// ROLES productions //
///////////////////////
  static final public void roles() throws ParseException {
    jj_consume_token(ROLES);
    roleSpecification(null);
  }

  static final public void role(RoleSpecification roleSpec) throws ParseException {
    jj_consume_token(IDENTIFIER);
    Role aRole = new Role(token.image);
    if (jj_2_4(3)) {
      roleSpecification(aRole);
    } else {
      ;
    }
    roleSpec.addRole(aRole);
    rolesMap.put(aRole.getName(), aRole);
    if (jj_2_5(3)) {
      jj_consume_token(COMMA);
      role(roleSpec);
    } else {
      ;
    }
  }

  static final public void roleSpecification(Role aRole) throws ParseException {
  RoleSpecification roleSpec = new RoleSpecification();
  boolean isSpecForRole = false;
    if (jj_2_6(3)) {
      jj_consume_token(BRA_LEFT);
        isSpecForRole = true;
    } else {
      ;
    }
    role(roleSpec);
    if (jj_2_7(3)) {
      jj_consume_token(ROLES_DISJOINT);
     roleSpec.setDisjoint(true);
    } else {
      ;
    }
    if (jj_2_8(3)) {
      jj_consume_token(ROLES_COVER);
     roleSpec.setCover(true);
    } else {
      ;
    }
    if (jj_2_9(3)) {
      jj_consume_token(BRA_RIGHT);
    } else {
      ;
    }
        if (isSpecForRole)
          aRole.setRoleSpecification(roleSpec);
        else
          flInput.add(roleSpec);
  }

//////////////////////////
// STATEMENT production //
//////////////////////////
  static final public void bg_theory() throws ParseException {
    if (jj_2_10(3)) {
      action();
    } else if (jj_2_11(3)) {
      actions();
    } else if (jj_2_12(3)) {
      interval();
    } else if (jj_2_13(3)) {
      counter();
    } else if (jj_2_14(3)) {
      timer();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void action() throws ParseException {
    Action anAction = new Action();
    flInput.add(anAction);
    boolean isImpersonal;
    Set <String> actionOutputs = new HashSet <String> ();

    //variables para validar sintaxis correcta
    boolean hasOutput = false;
    boolean hasOnlyOccurs = false;
    boolean hasOccurrences = false;
    boolean hasSync = false;
    boolean hasPerformable = false;
    if (jj_2_15(3)) {
      jj_consume_token(ACTION);
                              isImpersonal = false;
    } else if (jj_2_16(3)) {
      jj_consume_token(IMPERSONAL_ACTION);
                              isImpersonal = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
        anAction.setName(token.image);
        anAction.setImpersonal(isImpersonal);
        Action tmp = actions.put(anAction.getName(), anAction);
        if (tmp != null){
            StringBuilder sb = new StringBuilder();
            sb.append("Nombre de acci\u00f3n repetida: ('" + anAction.getName() + "'). Revisar datos del archivo de entrada");
            {if (true) throw new RuntimeException(sb.toString());}
        }
    label_4:
    while (true) {
      if (jj_2_17(3)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_21(3)) {
        jj_consume_token(OUTPUT_VALUES);
        jj_consume_token(BRA_LEFT);
        actionOutputs = set();
        jj_consume_token(BRA_RIGHT);
              if (hasOutput)
                {if (true) throw new RuntimeException("La acci\u00f3n "+ anAction.getName() + " tiene definido m\u00e1s de un output value");}

                          //Si se definen output values, tienen que ser con mas de un valor	
              if(actionOutputs.size()==1)
                {if (true) throw new RuntimeException("La acci\u00f3n "+ anAction.getName() + " con output values tiene definido un unico valor de salida");}

              hasOutput = true;
              anAction.setOutputValues(actionOutputs);
      } else if (jj_2_22(3)) {
        jj_consume_token(ONLY_OCCURS_IN);
        jj_consume_token(IDENTIFIER);
                if (hasOnlyOccurs)
                    {if (true) throw new RuntimeException("La acci\u00f3n "+ anAction.getName() + " tiene definido m\u00e1s de un 'only occurs in'");}
                hasOnlyOccurs = true;
                Interval tempInterval = getInterval(token.image);
                anAction.setOccursIn(tempInterval);
      } else if (jj_2_23(3)) {
        jj_consume_token(OCCURRENCES);
        jj_consume_token(NUMBER);
                if (hasOccurrences)
                    {if (true) throw new RuntimeException("La acci\u00f3n "+ anAction.getName() + " tiene definido m\u00e1s de un 'occurrences'");}
                hasOccurrences = true;
                anAction.setOccurrences(new Integer(token.image));
      } else if (jj_2_24(3)) {
        jj_consume_token(SYNC);
        jj_consume_token(IDENTIFIER);
                if (hasSync)
                    {if (true) throw new RuntimeException("La acci\u00f3n "+ anAction.getName() + " tiene definido m\u00e1s de un 'sync'");}
                hasSync = true;
                Action syncAction = getAction(token.image);
                anAction.setSync(syncAction, true);
                syncAction.setSync(anAction, false);
        if (jj_2_18(3)) {
          jj_consume_token(ALLOW_AUTOSYNC);
                    anAction.setAllowAutoSync(true);
        } else if (jj_2_19(3)) {
          jj_consume_token(DISALLOW_AUTOSYNC);
                    anAction.setAllowAutoSync(false);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_25(3)) {
        jj_consume_token(PERFORMABLE);
        jj_consume_token(IDENTIFIER);
                if (hasPerformable)
                    {if (true) throw new RuntimeException("La acci\u00f3n "+ anAction.getName() + " tiene definido m\u00e1s de un 'performable by'");}
                hasPerformable = true;

                if (isImpersonal){
                    StringBuilder sb = new StringBuilder();
                    sb.append("Las acciones impersonales no pueden ser 'only performable by' : ('" +
                        anAction.getName() + "'). Revisar datos del archivo de entrada");
                    {if (true) throw new RuntimeException(sb.toString());}
                }
                Role perfBy = getRole(token.image);
                anAction.addPerformableBy(perfBy);
        label_5:
        while (true) {
          if (jj_2_20(3)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(COMMA);
          jj_consume_token(IDENTIFIER);
                    Role anotherRole = new Role(token.image);
                    anAction.addPerformableBy(anotherRole);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

////////////////////////
// ACTIONS production //
////////////////////////
  static final public void actions() throws ParseException {
    List<Action> listAction = new ArrayList<Action>();
    jj_consume_token(ACTIONS);
    jj_consume_token(IDENTIFIER);
        Action anAction = new Action();
        anAction.setName(token.image);
        listAction.add(anAction);
        flInput.add(anAction);
        Action tmp = actions.put(anAction.getName(), anAction);
        if (tmp != null){
            StringBuilder sb = new StringBuilder();
            sb.append("Nombre de acci\u00f3n repetida: ('" + anAction.getName() + "'). Revisar datos del archivo de entrada");
            {if (true) throw new RuntimeException(sb.toString());}
        }
    label_6:
    while (true) {
      if (jj_2_26(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
          Action anotherAction = new Action();
          anotherAction.setName(token.image);
          listAction.add(anotherAction);
          flInput.add(anotherAction);
          tmp = actions.put(anotherAction.getName(), anotherAction);
          if (tmp != null){
              StringBuilder sb = new StringBuilder();
              sb.append("Nombre de acci\u00f3n repetida: ('" + anAction.getName() + "'). Revisar datos del archivo de entrada");
              {if (true) throw new RuntimeException(sb.toString());}
          }
    }
    if (jj_2_27(3)) {
      jj_consume_token(ONLY_OCCURS_IN);
      jj_consume_token(IDENTIFIER);
            Interval tempInterval = getInterval(token.image);
            for (Action action : listAction)
                action.setOccursIn(tempInterval);
    } else {
      ;
    }
    if (jj_2_28(3)) {
      jj_consume_token(OCCURRENCES);
      jj_consume_token(NUMBER);
          Integer occu = new Integer(token.image);
          for (Action action : listAction)
            action.setOccurrences(occu);
    } else {
      ;
    }
    if (jj_2_30(3)) {
      jj_consume_token(PERFORMABLE);
      jj_consume_token(IDENTIFIER);
            Role perfBy = getRole(token.image);
            for (Action action : listAction)
                action.addPerformableBy(perfBy);
      label_7:
      while (true) {
        if (jj_2_29(3)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
                Role anotherRole = new Role(token.image);
                for (Action action : listAction)
                    action.addPerformableBy(anotherRole);
      }
    } else {
      ;
    }
  }

/////////////////////////
// INTERVAL production //
/////////////////////////
  static final public void interval() throws ParseException {
    Interval anInterval = new Interval();
    if (jj_2_31(3)) {
      jj_consume_token(LOCAL_INTERVAL);
    anInterval.setLocal(true);
    } else if (jj_2_32(3)) {
      jj_consume_token(GLOBAL_INTERVAL);
      anInterval.setLocal(false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    anInterval.setName(token.image);
    Interval tmp = intervals.put(anInterval.getName(), anInterval);
    if (tmp != null){
        StringBuilder sb = new StringBuilder();
        sb.append("Nombre de intervalo repetido: ('" + tmp.getName() + "'). Revisar datos del archivo de entrada");
        {if (true) throw new RuntimeException(sb.toString());}
    }
    flInput.add(anInterval);
    jj_consume_token(DEFINED_BY);
    if (jj_2_34(3)) {
      jj_consume_token(INFINITE);
        anInterval.setStartActive(true);
    } else if (jj_2_35(3)) {
      jj_consume_token(IDENTIFIER);
        Action startAction = getAction(token.image);
        anInterval.addStartTrigger(startAction);
      label_8:
      while (true) {
        if (jj_2_33(3)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
            startAction = getAction(token.image);
            anInterval.addStartTrigger(startAction);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(MINUS);
    if (jj_2_37(3)) {
      jj_consume_token(INFINITE);
        anInterval.setEndActive(true);
    } else if (jj_2_38(3)) {
      jj_consume_token(IDENTIFIER);
        Action endAction = getAction(token.image);
        anInterval.addEndTrigger(endAction);
      label_9:
      while (true) {
        if (jj_2_36(3)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
            endAction = getAction(token.image);
            anInterval.addEndTrigger(endAction);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_39(3)) {
      jj_consume_token(ONLY_OCCURS_IN);
      jj_consume_token(IDENTIFIER);
        Interval parentInterval = getInterval(token.image);
        anInterval.setOccursIn(parentInterval);
    } else {
      ;
    }
    if (jj_2_40(3)) {
      jj_consume_token(OCCURRENCES);
      jj_consume_token(NUMBER);
        anInterval.setOccurrences(new Integer(token.image));
    } else {
      ;
    }
  }

////////////////////////
// COUNTER production //
////////////////////////
  static final public void counter() throws ParseException {
    Counter counter = new Counter();
    flInput.add(counter);
    if (jj_2_41(3)) {
      jj_consume_token(LOCAL_COUNTER);
            counter.setLocal();
    } else if (jj_2_42(3)) {
      jj_consume_token(SHARED_COUNTER);
            counter.setShared();
    } else if (jj_2_43(3)) {
      jj_consume_token(GLOBAL_COUNTER);
            counter.setGlobal();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
        counter.setName(token.image);
        Counter tmp = counters.put(counter.getName(), counter);
        if (tmp != null){
            StringBuilder sb = new StringBuilder();
            sb.append("Nombre de contador repetido: ('" + tmp.getName() + "'). Revisar datos del archivo de entrada");
            {if (true) throw new RuntimeException(sb.toString());}
        }
    if (jj_2_44(3)) {
      jj_consume_token(SHARED_ROLE_COUNTER);
      jj_consume_token(IDENTIFIER);
            if (counter.isShared()) {
                counter.setRoleForCounter(getRole(token.image));
            } else {
                StringBuilder sb = new StringBuilder();
                sb.append("Error al definir el rol: ('" + counter.getName() + "'). Solo los contadores shared pueden especificar rol.");
                {if (true) throw new RuntimeException(sb.toString());}
            }
    } else {
      ;
    }
        if (counter.isShared() && counter.getRoleForCounter() == null) {
            StringBuilder sb = new StringBuilder();
            sb.append("Se definio el rol compartido ('" + counter.getName() + "') sin especificar para que rol.");
            {if (true) throw new RuntimeException(sb.toString());}
        }
    if (jj_2_45(3)) {
      jj_consume_token(COUNTER_INIT_VALUE);
      jj_consume_token(NUMBER);
            counter.setInitValue(Integer.parseInt(token.image));
    } else {
      ;
    }
    if (jj_2_46(3)) {
      jj_consume_token(COUNTER_MIN_VALUE);
      jj_consume_token(NUMBER);
                int auxMin = Integer.parseInt(token.image);
                        if (auxMin > counter.getInitValue()){
                StringBuilder sb = new StringBuilder();
                sb.append("El valor m\u00ednimo del contador '" + counter.getName() + "' no puede ser mayor a su valor inicial. Revisar datos del archivo de entrada");
                        {if (true) throw new RuntimeException(sb.toString());}
                }
                else
                {
                        counter.setMinValue(auxMin);
                }
    } else {
      ;
    }
    if (jj_2_47(3)) {
      jj_consume_token(COUNTER_MAX_VALUE);
      jj_consume_token(NUMBER);
                int auxMax = Integer.parseInt(token.image);
                        if (auxMax < counter.getInitValue()){
                StringBuilder sb = new StringBuilder();
                sb.append("El valor m\u00e1ximo del contador '" + counter.getName() + "' no puede ser menor a su valor inicial. Revisar datos del archivo de entrada");
                        {if (true) throw new RuntimeException(sb.toString());}
                }
                else
                {
                        counter.setMaxValue(auxMax);
                }
    } else {
      ;
    }
    label_10:
    while (true) {
      if (jj_2_48(3)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(COMMA);
      jj_consume_token(COUNTER_INCREASES);
      jj_consume_token(IDENTIFIER);
            Action action = getAction(token.image);
            String providedThat = null;
            int value = 1;
            List<Role> affectedRoles = new ArrayList<Role>();
            boolean isDefaultForRole = false;
      if (jj_2_52(3)) {
        jj_consume_token(COUNTER_BY);
        jj_consume_token(NUMBER);
               value = Integer.parseInt(token.image);
        label_11:
        while (true) {
          if (jj_2_49(3)) {
            ;
          } else {
            break label_11;
          }
          jj_consume_token(SHARED_ROLE_COUNTER);
          jj_consume_token(IDENTIFIER);
                   Role roleToAdd = getRole(token.image);
                   if (counter.isShared()) {
                       affectedRoles.add(roleToAdd);
                   } else {
                       StringBuilder sb = new StringBuilder();
                       sb.append("Solo se pueden especificar variaciones por rol en contadores compartidos.");
                       {if (true) throw new RuntimeException(sb.toString());}
                   }
          label_12:
          while (true) {
            if (jj_2_50(3)) {
              ;
            } else {
              break label_12;
            }
            jj_consume_token(COMMA);
            jj_consume_token(IDENTIFIER);
                        roleToAdd = getRole(token.image);
                        if (counter.isShared()) {
                           affectedRoles.add(roleToAdd);
                        } else {
                           StringBuilder sb = new StringBuilder();
                           sb.append("Solo se pueden especificar variaciones por rol en contadores compartidos.");
                           {if (true) throw new RuntimeException(sb.toString());}
                        }
          }
          if (jj_2_51(3)) {
            jj_consume_token(SHARED_ROLE_SPECIFICITY);
                        isDefaultForRole = true;
          } else {
            ;
          }
        }
      } else {
        ;
      }
      if (jj_2_53(3)) {
        jj_consume_token(COUNTER_PROVIDED);
               providedThat = raw_text();
      } else {
        ;
      }
            if(counter.isShared() && affectedRoles.size() > 0 && !isDefaultForRole) {
                for(Role role : affectedRoles) {
                    counter.addIncreaseActionForRole(action, role, value, providedThat);
                }
            } else {
                counter.addIncreaseAction(action, value, providedThat);
            }
    }
    label_13:
    while (true) {
      if (jj_2_54(3)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(COMMA);
      jj_consume_token(COUNTER_DECREASES);
      jj_consume_token(IDENTIFIER);
                Action action = getAction(token.image);
                String providedThat = null;
                int value = 1;
                List<Role> affectedRoles = new ArrayList<Role>();
                boolean isDefaultForRole = false;
      if (jj_2_58(3)) {
        jj_consume_token(COUNTER_BY);
        jj_consume_token(NUMBER);
                   value = Integer.parseInt(token.image);
        label_14:
        while (true) {
          if (jj_2_55(3)) {
            ;
          } else {
            break label_14;
          }
          jj_consume_token(SHARED_ROLE_COUNTER);
          jj_consume_token(IDENTIFIER);
                       Role roleToAdd = getRole(token.image);
                       if (counter.isShared()) {
                           affectedRoles.add(roleToAdd);
                       } else {
                           StringBuilder sb = new StringBuilder();
                           sb.append("Solo se pueden especificar variaciones por rol en contadores compartidos.");
                           {if (true) throw new RuntimeException(sb.toString());}
                       }
          label_15:
          while (true) {
            if (jj_2_56(3)) {
              ;
            } else {
              break label_15;
            }
            jj_consume_token(COMMA);
            jj_consume_token(IDENTIFIER);
                            roleToAdd = getRole(token.image);
                            if (counter.isShared()) {
                               affectedRoles.add(roleToAdd);
                            } else {
                               StringBuilder sb = new StringBuilder();
                               sb.append("Solo se pueden especificar variaciones por rol en contadores compartidos.");
                               {if (true) throw new RuntimeException(sb.toString());}
                            }
          }
          if (jj_2_57(3)) {
            jj_consume_token(SHARED_ROLE_SPECIFICITY);
                            isDefaultForRole = true;
          } else {
            ;
          }
        }
      } else {
        ;
      }
      if (jj_2_59(3)) {
        jj_consume_token(COUNTER_PROVIDED);
                   providedThat = raw_text();
      } else {
        ;
      }
                if(counter.isShared() && affectedRoles.size() > 0 && !isDefaultForRole) {
                    for(Role role : affectedRoles) {
                        counter.addDecreaseActionForRole(action, role, value, providedThat);
                    }
                } else {
                    counter.addDecreaseAction(action, value, providedThat);
                }
    }
        if(counter.isShared()) {
            counter.normalizeSharedCounter();
        }
    if (jj_2_60(3)) {
      jj_consume_token(COMMA);
      jj_consume_token(COUNTER_MIN_IMPEDES_ACTIONS);
            counter.setMinImpedesActions(true);
    } else {
      ;
    }
    if (jj_2_61(3)) {
      jj_consume_token(COMMA);
      jj_consume_token(COUNTER_MAX_IMPEDES_ACTIONS);
            counter.setMaxImpedesActions(true);
    } else {
      ;
    }
    if (jj_2_63(3)) {
      jj_consume_token(COUNTER_RESET);
      jj_consume_token(IDENTIFIER);
                Action action = getAction(token.image);
                String providedThat = null;
      if (jj_2_62(3)) {
        jj_consume_token(COUNTER_PROVIDED);
                   providedThat = raw_text();
      } else {
        ;
      }
                counter.addResetAction(action, providedThat);
    } else {
      ;
    }
    label_16:
    while (true) {
      if (jj_2_64(3)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(COMMA);
      jj_consume_token(COUNTER_RESET);
      jj_consume_token(IDENTIFIER);
                Action action = getAction(token.image);
                String providedThat = null;
      if (jj_2_65(3)) {
        jj_consume_token(COUNTER_PROVIDED);
                   providedThat = raw_text();
      } else {
        ;
      }
                counter.addResetAction(action, providedThat);
    }
    if (jj_2_67(3)) {
      jj_consume_token(COUNTER_SETS_WITH);
      jj_consume_token(IDENTIFIER);
                Action action = getAction(token.image);
                String providedThat = null;
                int value;
      jj_consume_token(COUNTER_TO_VALUE);
      jj_consume_token(NUMBER);
                   value = Integer.parseInt(token.image);
      if (jj_2_66(3)) {
        jj_consume_token(COUNTER_PROVIDED);
                   providedThat = raw_text();
      } else {
        ;
      }
                counter.addSetValueAction(action, value, providedThat);
    } else {
      ;
    }
    label_17:
    while (true) {
      if (jj_2_68(3)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(COMMA);
      jj_consume_token(COUNTER_SETS_WITH);
      jj_consume_token(IDENTIFIER);
                Action action = getAction(token.image);
                String providedThat = null;
                int value;
      jj_consume_token(COUNTER_TO_VALUE);
      jj_consume_token(NUMBER);
                   value = Integer.parseInt(token.image);
      if (jj_2_69(3)) {
        jj_consume_token(COUNTER_PROVIDED);
                   providedThat = raw_text();
      } else {
        ;
      }
                counter.addSetValueAction(action, value, providedThat);
    }
  }

/////////////////////////////////
// Timer (ex TEMPORAL ACTIONS) //
/////////////////////////////////
  static final public void timer() throws ParseException {
    jj_consume_token(TIMER);
    jj_consume_token(IDENTIFIER);
    Timer timer = new Timer();
    timer.addEvento(token.image);
    flInput.add(timer);
    label_18:
    while (true) {
      if (jj_2_70(3)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
        timer.addEvento(token.image);
    }
  }

///////////////////////
// EXTRA productions //
///////////////////////
  static final public List <String> list() throws ParseException {
  List <String> aList = new ArrayList <String> ();
    jj_consume_token(IDENTIFIER);
    aList.add(token.image);
    label_19:
    while (true) {
      if (jj_2_71(3)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      aList.add(token.image);
    }
    {if (true) return aList;}
    throw new Error("Missing return statement in function");
  }

  static final public Set <String> set() throws ParseException {
  Set <String> aList = new HashSet <String> ();
    jj_consume_token(IDENTIFIER);
    aList.add(token.image);
    label_20:
    while (true) {
      if (jj_2_72(3)) {
        ;
      } else {
        break label_20;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      aList.add(token.image);
    }
    {if (true) return aList;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////
// RAW TEXT production //
/////////////////////////
  static final public String raw_text() throws ParseException {
  String aString;
    jj_consume_token(START_RAW_TEXT);
    jj_consume_token(RAW_TEXT);
    aString = token.image;
    jj_consume_token(END_RAW_TEXT);
    {if (true) return aString;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////////////////////////////////////////////////////////////////////
// CLAUSES-MODE productions //
////////////////////////////////////////////////////////////////////////////////////////////////////
  static final public void clause() throws ParseException {
    FLFormula p;
    String tag = null;
    String x = null;
    originalFormula = "";
    if (jj_2_73(3)) {
      jj_consume_token(TAG);
      jj_consume_token(IDENTIFIER);
       tag = token.image;
    } else {
      ;
    }
    if (jj_2_74(3)) {
      //P-cláusula-disyuntiva       |   P-cláusula-conjuntiva |
            //P(...) | P(...) | P(...)    o   P(...) & P(...) & P(...)
            p = p_clauses();
        flInput.addPermission(p);
        flInput.addFLPermission(originalFormula);
    } else if (jj_2_75(3)) {
      //PP-cláusula-disyuntiva       |   PP-cláusula-conjuntiva |
            //PP(...) | PP(...) | PP(...)    o   PP(...) & PP(...) & PP(...)
            p = pp_clauses();
        flInput.addPermission(p);
        flInput.addFLPermission(originalFormula);
    } else if (jj_2_76(3)) {
      //O-cláusula-conjuntiva       |   O-cláusula-disyuntiva
            //O(...) & O(...) & O(...)    o   O(...) | O(...) | O(...)
            p = o_clauses();
        flInput.addRule(p);
        flInput.addFLRule(originalFormula);
    } else if (jj_2_77(3)) {
      //F-cláusula-conjuntiva       |   F-cláusula-disyuntiva
            //F(...) & F(...) & F(...)    o   F(...) | F(...) | F(...)
            p = f_clauses();
        flInput.addRule(p);
        flInput.addFLRule(originalFormula);
    } else if (jj_2_78(3)) {
      //EXISTS (var (: rol)? ; (O-cláusula-disyuntiva | F-cláusula-disyuntiva | P-cláusula-disyuntiva) ) |
            //FORALL (var (: rol)? ; (O-cláusula-conjuntiva | F-clásula-conjuntiva | P-cláusula-conjuntiva) )
            p = quantifierWithDeontic();
        if (Util.hasPermission(p)){
            flInput.addPermission(p);
            flInput.addFLPermission(originalFormula);
        }
        else{
            flInput.addRule(p);
            flInput.addFLRule(originalFormula);
        }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     if (tag != null)
        flInput.addTaggedFormula(tag,p);
  }

//F-cláusula-disyuntiva :=     F-cláusula (or F-cláusula)*
//F-cláusula-conjuntiva :=     F-cláusula (and F-cláusula)*
//1 o más F-cláusulas con OR o  1 o más con AND, pero no combinando OR y AND
  static final public FLFormula f_clauses() throws ParseException {
    FLFormula p;
    FLFormula p2;
    p = f_clause();
    if (jj_2_83(3)) {
      if (jj_2_81(3)) {
          originalFormula += " & ";
        jj_consume_token(ML_AND);
        p2 = f_clause();
            p = new FLAnd(p, p2);         //F(...) &  F(...)

        label_21:
        while (true) {
          if (jj_2_79(3)) {
            ;
          } else {
            break label_21;
          }
                originalFormula += " & ";
          jj_consume_token(ML_AND);
          p2 = f_clause();
                p = new FLAnd(p, p2);       //F(...) &  F(...) &  F(...) ...

        }
      } else if (jj_2_82(3)) {
        jj_consume_token(ML_OR);
        p2 = f_clause();
            originalFormula += " | ";
            p = new FLOr(p, p2);
        label_22:
        while (true) {
          if (jj_2_80(3)) {
            ;
          } else {
            break label_22;
          }
          jj_consume_token(ML_OR);
          p2 = f_clause();
                originalFormula += " | ";
                p = new FLOr(p, p2);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//O-cláusula-disyuntiva :=     O-cláusula (or O-cláusula)*
//O-cláusula-conjuntiva :=     O-cláusula (and O-cláusula)*
//1 o más O-cláusulas con OR o  1 o más con AND, pero no combinando OR y AND
  static final public FLFormula o_clauses() throws ParseException {
    FLFormula p;
    FLFormula p2;
    p = o_clause();
    if (jj_2_88(3)) {
      if (jj_2_86(3)) {
        originalFormula += " & ";
        jj_consume_token(ML_AND);
        p2 = o_clause();
            p = new FLAnd(p, p2);
        label_23:
        while (true) {
          if (jj_2_84(3)) {
            ;
          } else {
            break label_23;
          }
                originalFormula += " & ";
          jj_consume_token(ML_AND);
          p2 = o_clause();
                p = new FLAnd(p, p2);
        }
      } else if (jj_2_87(3)) {
        originalFormula += " | ";
        jj_consume_token(ML_OR);
        p2 = o_clause();
            p = new FLOr(p, p2);
        label_24:
        while (true) {
          if (jj_2_85(3)) {
            ;
          } else {
            break label_24;
          }
                originalFormula += " | ";
          jj_consume_token(ML_OR);
          p2 = o_clause();
                originalFormula += " | ";
                p = new FLOr(p, p2);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/*
//P-cláusula-disyuntiva :=     P-cláusula (or P-cláusula)*
//p_clause_conjunctive :=     P-cláusula (and P-cláusula)*
//1 o más P-cláusulas con OR o  1 o más con AND, pero no combinando OR y AND
FLFormula p_clauses666() :
{
    FLFormula p;
    FLFormula p2;
}
{
  (
    p = p_clause()
  )
  (
    (
      < ML_AND >
        {
            originalFormula += " & ";
        }
        p2 = p_clause()
        {
            p = new FLAnd(p, p2);
        }
        (   < ML_AND > p2 = p_clause()
            {
                originalFormula += " & ";
                p = new FLAnd(p, p2);
            }
        )*
     |
      < ML_OR >
        {
            originalFormula += " | ";
        }
        p2 = p_clause()
        {
            p = new FLOr(p, p2);
        }
        (   < ML_OR > p2 = p_clause()
            {
                originalFormula += " | ";
                p = new FLOr(p, p2);
            }
        )*
    )?
  )
  {
    return p;
  }
}
*/

//P-cláusula-disyuntiva :=     P-cláusula (or P-cláusula)*
//p_clause_conjunctive :=     P-cláusula (and P-cláusula)*
//1 o más P-cláusulas con OR o  1 o más con AND, pero no combinando OR y AND
  static final public FLFormula p_clauses() throws ParseException {
    FLFormula p = null;
    FLFormula p2 = null;
    p = p_clause();
    if (jj_2_91(3)) {
      if (jj_2_89(3)) {
        jj_consume_token(ML_OR);
                originalFormula += " | ";
        p2 = p_clause_disjunctive();
                if (p2 != null)
                    p = new FLOr(p, p2);
      } else if (jj_2_90(3)) {
        jj_consume_token(ML_AND);
                originalFormula += " & ";
        p2 = p_clause_conjunctive();
                if (p2 != null)
                    p = new FLAnd(p, p2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//PP-cláusula-disyuntiva :=     PP-cláusula (or P-cláusula)*
//pp_clause_conjunctive :=     PP-cláusula (and P-cláusula)*
//1 o más PP-cláusulas con OR o  1 o más con AND, pero no combinando OR y AND
  static final public FLFormula pp_clauses() throws ParseException {
    FLFormula p = null;
    FLFormula p2 = null;
    p = pp_clause();
    if (jj_2_94(3)) {
      if (jj_2_92(3)) {
        jj_consume_token(ML_OR);
                originalFormula += " | ";
        p2 = pp_clause_disjunctive();
                if (p2 != null)
                    p = new FLOr(p, p2);
      } else if (jj_2_93(3)) {
        jj_consume_token(ML_AND);
                originalFormula += " & ";
        p2 = pp_clause_conjunctive();
                if (p2 != null)
                    p = new FLAnd(p, p2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//P-cláusula (OR P-cláusula)*
  static final public FLFormula p_clause_disjunctive() throws ParseException {
    FLFormula p = null;;
    FLFormula p2;
    p = p_clause();
    label_25:
    while (true) {
      if (jj_2_95(3)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(ML_OR);
      p2 = p_clause();
                originalFormula += " | ";
                p = new FLOr(p, p2);
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//PP-cláusula (OR PP-cláusula)*
  static final public FLFormula pp_clause_disjunctive() throws ParseException {
    FLFormula p = null;;
    FLFormula p2;
    p = pp_clause();
    label_26:
    while (true) {
      if (jj_2_96(3)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(ML_OR);
      p2 = pp_clause();
                originalFormula += " | ";
                p = new FLOr(p, p2);
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//O-cláusula (OR O-cláusula)*
  static final public FLFormula o_clause_disjunctive() throws ParseException {
    FLFormula p = null;;
    FLFormula p2;
    p = o_clause();
    label_27:
    while (true) {
      if (jj_2_97(3)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(ML_OR);
      p2 = o_clause();
                originalFormula += " | ";
                p = new FLOr(p, p2);
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//F-cláusula (OR F-cláusula)*
  static final public FLFormula f_clause_disjunctive() throws ParseException {
    FLFormula p = null;;
    FLFormula p2;
    p = f_clause();
    label_28:
    while (true) {
      if (jj_2_98(3)) {
        ;
      } else {
        break label_28;
      }
      jj_consume_token(ML_OR);
      p2 = f_clause();
                originalFormula += " | ";
                p = new FLOr(p, p2);
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//P-cláusula (AND P-cláusula)*
  static final public FLFormula p_clause_conjunctive() throws ParseException {
    FLFormula p = null;
    FLFormula p2;
    p = p_clause();
    label_29:
    while (true) {
      if (jj_2_99(3)) {
        ;
      } else {
        break label_29;
      }
      jj_consume_token(ML_AND);
      p2 = p_clause();
                originalFormula += " & ";
                p = new FLAnd(p, p2);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//PP-cláusula (AND PP-cláusula)*
  static final public FLFormula pp_clause_conjunctive() throws ParseException {
    FLFormula p = null;
    FLFormula p2;
    p = pp_clause();
    label_30:
    while (true) {
      if (jj_2_100(3)) {
        ;
      } else {
        break label_30;
      }
      jj_consume_token(ML_AND);
      p2 = pp_clause();
                originalFormula += " & ";
                p = new FLAnd(p, p2);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//O-cláusula (AND O-cláusula)*
  static final public FLFormula o_clause_conjunctive() throws ParseException {
    FLFormula p = null;
    FLFormula p2;
    p = o_clause();
    label_31:
    while (true) {
      if (jj_2_101(3)) {
        ;
      } else {
        break label_31;
      }
      jj_consume_token(ML_AND);
      p2 = o_clause();
                originalFormula += " & ";
                p = new FLAnd(p, p2);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

//F-cláusula (AND F-cláusula)*
  static final public FLFormula f_clause_conjunctive() throws ParseException {
    FLFormula p = null;
    FLFormula p2;
    p = f_clause();
    label_32:
    while (true) {
      if (jj_2_102(3)) {
        ;
      } else {
        break label_32;
      }
      jj_consume_token(ML_AND);
      p2 = f_clause();
                originalFormula += " & ";
                p = new FLAnd(p, p2);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Permission p_clause() throws ParseException {
  FLFormula mainFormula;
  FLFormula conditionFormula = null;
  Permission res;
  originalFormula += "P(";
    jj_consume_token(PERMISSION);
    mainFormula = sentence();
    if (jj_2_103(3)) {
      jj_consume_token(GIVEN_THAT);
        originalFormula += " given that ";
      conditionFormula = sentence();
    } else {
      ;
    }
    jj_consume_token(PAR_RIGHT);
    if (conditionFormula == null)
    {
      res = new Permission(mainFormula);
    } else {
      res = new Permission(mainFormula, conditionFormula);
    }
    originalFormula += ")";
    if (jj_2_104(3)) {
      jj_consume_token(EXCEPTION_OF);
      jj_consume_token(IDENTIFIER);
      String exception = token.image;
      if (exception != null)
      {
        if (conditionFormula == null)
        {
                        //ERROR! las únicas formulas con excepciones pueden ser los permisos con condiciones
                        StringBuilder sb = new StringBuilder();
            sb.append("Hay una f\u00f3rmula que es excepci\u00f3n de una regla pero no posee condici\u00f3n: ('" + originalFormula + "'). ");
            {if (true) throw new RuntimeException(sb.toString());}
        }  else {
                        FLFormula rule = flInput.getFLFormulaFromTag(exception);
                        rule.addException(res);
                        flInput.addRule(rule);
                        originalFormula += " is exception of " + rule.toString();
                        flInput.addFLRule(originalFormula);
        }
      }
    } else {
      ;
    }
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public PermanentPermission pp_clause() throws ParseException {
  FLFormula mainFormula;
  FLFormula conditionFormula = null;
  PermanentPermission res;
  originalFormula += "PP(";
    jj_consume_token(PERM_PERMISSION);
    mainFormula = sentence();
    if (jj_2_105(3)) {
      jj_consume_token(GIVEN_THAT);
        originalFormula += " given that ";
      conditionFormula = sentence();
    } else {
      ;
    }
    jj_consume_token(PAR_RIGHT);
    if (conditionFormula == null)
    {
      res = new PermanentPermission(mainFormula);
    } else {
      res = new PermanentPermission(mainFormula, conditionFormula);
    }
    originalFormula += ")";
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public Obligation o_clause() throws ParseException {
  FLFormula repairFormula = null;
  FLFormula mainFormula;
  Boolean hasRepair = false;
  originalFormula += "O(";
    jj_consume_token(OBLIGATION);
    mainFormula = sentence();
    jj_consume_token(PAR_RIGHT);
    originalFormula += ")";
    if (jj_2_106(3)) {
        originalFormula += " repaired by ";
      jj_consume_token(REPAIRED_BY);
      jj_consume_token(PAR_LEFT);
      repairFormula = sentence();
      jj_consume_token(PAR_RIGHT);
        originalFormula += ")";
        hasRepair = true;
    } else {
      ;
    }
    if (hasRepair)
    {
      {if (true) return new Obligation(mainFormula, repairFormula);}
    }
    else
    {
      {if (true) return new Obligation(mainFormula);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Forbidden f_clause() throws ParseException {
  FLFormula repairFormula = null;
  FLFormula mainFormula;
  Boolean hasRepair = false;
  originalFormula += "F(";
    jj_consume_token(FORBIDDEN);
    mainFormula = sentence();
    jj_consume_token(PAR_RIGHT);
    originalFormula += ")";
    if (jj_2_107(3)) {
        originalFormula += " repaired by (";
      jj_consume_token(REPAIRED_BY);
      jj_consume_token(PAR_LEFT);
      repairFormula = sentence();
      jj_consume_token(PAR_RIGHT);
        originalFormula += ") ";
        hasRepair = true;
    } else {
      ;
    }
    if (hasRepair)
    {
      {if (true) return new Forbidden(mainFormula, repairFormula);}
    }
    else
    {
      {if (true) return new Forbidden(mainFormula);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public FLFormula quantifierWithDeontic() throws ParseException {
  FLFormula f ;
    if (jj_2_108(3)) {
      f = existsWithDeontic();
    } else if (jj_2_109(3)) {
      f = forallWithDeontic();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public FLFormula forallWithDeontic() throws ParseException {
  FLFormula tempFormula ;
  String variableName;
  String role = null;
    jj_consume_token(FORALL);
    jj_consume_token(IDENTIFIER);
        variableName = token.image;
        originalFormula += "FORALL(" + variableName;
    if (jj_2_110(3)) {
      jj_consume_token(DOUBLE_DOT);
      jj_consume_token(IDENTIFIER);
          role = token.image;
          originalFormula += ":" + role;
    } else {
      ;
    }
    jj_consume_token(89);
        originalFormula += "; ";
    if (jj_2_111(3)) {
      tempFormula = p_clause_conjunctive();
    } else if (jj_2_112(3)) {
      tempFormula = pp_clause_conjunctive();
    } else if (jj_2_113(3)) {
      tempFormula = o_clause_conjunctive();
    } else if (jj_2_114(3)) {
      tempFormula = f_clause_conjunctive();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PAR_RIGHT);
      FLFormula forallFormula = new FLForall(variableName, role, tempFormula );
    if (jj_2_115(3)) {
      jj_consume_token(EXCEPTION_OF);
      jj_consume_token(IDENTIFIER);
      String exception = token.image;
      if (exception != null)
      {
        if (!(tempFormula.getClass().equals(Permission.class) | tempFormula.getClass().equals(PermanentPermission.class)))
        {
                        //ERROR! las únicas formulas válidas como excepciones son los permisos
                        StringBuilder sb = new StringBuilder();
            sb.append("Hay una f\u00f3rmula que es excepci\u00f3n de una regla pero no es un permiso: ('" + originalFormula + "'). ");
            {if (true) throw new RuntimeException(sb.toString());}
        }  else {
                        FLFormula rule = flInput.getFLFormulaFromTag(exception);
                        if (rule.getClass().equals(Obligation.class) | rule.getClass().equals(Forbidden.class) |
                        ( (rule.getClass().equals(FLForall.class) | rule.getClass().equals(FLExist.class))
                                & ( ((FLQuantifier)rule).getFormula().getClass().equals(Obligation.class) | ((FLQuantifier)rule).getFormula().getClass().equals(Forbidden.class))))
                        {
                                rule.addException(forallFormula);
                                flInput.addRule(rule);
                                originalFormula += " is exception of " + rule.toString();
                                flInput.addFLRule(originalFormula);
                        } else {
                          //ERROR! las únicas formulas que pueden tener excepciones son las reglas
                                        StringBuilder sb = new StringBuilder();
                        sb.append("Hay una f\u00f3rmula que tiene una excepci\u00f3n pero no es una regla: ('" + rule.toString() + "'). ");
                        {if (true) throw new RuntimeException(sb.toString());}
                        }
        }
      }
    } else {
      ;
    }
        originalFormula += ")";
        {if (true) return forallFormula;}
    throw new Error("Missing return statement in function");
  }

  static final public FLFormula existsWithDeontic() throws ParseException {
  FLFormula tempFormula ;
  String variableName;
  String role = null;
    jj_consume_token(EXISTS);
    jj_consume_token(IDENTIFIER);
        variableName = token.image;
        originalFormula += "EXISTS(" + variableName;
    if (jj_2_116(3)) {
      jj_consume_token(DOUBLE_DOT);
      jj_consume_token(IDENTIFIER);
          role = token.image;
          originalFormula += ":" + role;
    } else {
      ;
    }
    jj_consume_token(89);
        originalFormula += "; ";
    if (jj_2_117(3)) {
      tempFormula = p_clause_disjunctive();
    } else if (jj_2_118(3)) {
      tempFormula = pp_clause_disjunctive();
    } else if (jj_2_119(3)) {
      tempFormula = o_clause_disjunctive();
    } else if (jj_2_120(3)) {
      tempFormula = f_clause_disjunctive();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PAR_RIGHT);
      FLFormula existsFormula = new FLExist(variableName, role, tempFormula );
    if (jj_2_121(3)) {
      jj_consume_token(EXCEPTION_OF);
      jj_consume_token(IDENTIFIER);
      String exception = token.image;
      if (exception != null)
      {
        if (!(tempFormula.getClass().equals(Permission.class) | tempFormula.getClass().equals(PermanentPermission.class)))
        {
                        //ERROR! las únicas formulas válidas como excepciones son los permisos
                        StringBuilder sb = new StringBuilder();
            sb.append("Hay una f\u00f3rmula que es excepci\u00f3n de una regla pero no es un permiso: ('" + originalFormula + "'). ");
            {if (true) throw new RuntimeException(sb.toString());}
        }  else {
                    FLFormula rule = flInput.getFLFormulaFromTag(exception);

                if (rule.getClass().equals(Obligation.class) | rule.getClass().equals(Forbidden.class) |
                ( (rule.getClass().equals(FLForall.class) | rule.getClass().equals(FLExist.class))
                        & ( ((FLQuantifier)rule).getFormula().getClass().equals(Obligation.class) | ((FLQuantifier)rule).getFormula().getClass().equals(Forbidden.class))))
                    {
                                rule.addException(existsFormula);
                            flInput.addRule(rule);
                            originalFormula += " is exception of " + rule.toString();
                        flInput.addFLRule(originalFormula);
                } else {
                                //ERROR! las únicas formulas que pueden tener excepciones son las reglas
                                StringBuilder sb = new StringBuilder();
                sb.append("Hay una f\u00f3rmula que tiene una excepci\u00f3n pero no es una regla: ('" + rule.toString() + "'). ");
                {if (true) throw new RuntimeException(sb.toString());}
                    }
       }
     }
    } else {
      ;
    }
        originalFormula += ")";
        {if (true) return existsFormula;}
    throw new Error("Missing return statement in function");
  }

  static final public FLFormula sentence() throws ParseException {
  FLFormula tempFormula;
  FLFormula finalFormula;
  Boolean isDiamond;
  Boolean isExist;
  String intervalName;
  String variable;
  String role = null;
  FLInterval interval = null;
    if (jj_2_135(3)) {
      if (jj_2_122(3)) {
        finalFormula = terminal();
      } else if (jj_2_123(3)) {
        jj_consume_token(PAR_LEFT);
            originalFormula += "(";
        finalFormula = sentence();
        jj_consume_token(PAR_RIGHT);
        originalFormula += ") ";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_33:
      while (true) {
        if (jj_2_124(3)) {
          ;
        } else {
          break label_33;
        }
        if (jj_2_125(3)) {
          jj_consume_token(ML_AND);
        originalFormula += " & ";
          tempFormula = sentence();
      finalFormula = new FLAnd(finalFormula, tempFormula);
        } else if (jj_2_126(3)) {
          jj_consume_token(ML_OR);
        originalFormula += " | ";
          tempFormula = sentence();
      finalFormula = new FLOr(finalFormula, tempFormula);
        } else if (jj_2_127(3)) {
        originalFormula += " -> ";
          jj_consume_token(ML_THEN);
          tempFormula = sentence();
      finalFormula = new FLThen(finalFormula, tempFormula);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return finalFormula;}
    } else if (jj_2_136(3)) {
      jj_consume_token(ML_NOT);
        originalFormula += "!(";
      tempFormula = sentence();
    FLFormula res = new FLNeg(tempFormula);
    originalFormula += ")";
    {if (true) return res;}
    } else if (jj_2_137(3)) {
      if (jj_2_128(3)) {
        jj_consume_token(EXISTS);
      isExist = true;
      originalFormula += "EXISTS(";
      } else if (jj_2_129(3)) {
        jj_consume_token(FORALL);
      originalFormula += "FORALL(";
      isExist = false;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFIER);
          variable = token.image;
          originalFormula += variable;
      if (jj_2_130(3)) {
        jj_consume_token(DOUBLE_DOT);
        jj_consume_token(IDENTIFIER);
          role = token.image;
          originalFormula += ":" + role;
      } else {
        ;
      }
        originalFormula += "; ";
      jj_consume_token(89);
      tempFormula = sentence();
      jj_consume_token(PAR_RIGHT);
        originalFormula += ")";
    if (isExist)
    {
      {if (true) return new FLExist(variable, role, tempFormula );}
    }
    else
    {
      {if (true) return new FLForall(variable, role, tempFormula);}
    }
    } else if (jj_2_138(3)) {
      if (jj_2_131(3)) {
        jj_consume_token(ML_DIAMOND);
      isDiamond = true;
      originalFormula += "<>";
      } else if (jj_2_132(3)) {
        jj_consume_token(ML_BOX);
      isDiamond = false;
      originalFormula += "[]";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_134(3)) {
        jj_consume_token(UNDERSCORE);
        jj_consume_token(BRA_LEFT);
        jj_consume_token(IDENTIFIER);
            String varOIntervalo = token.image;
            intervalName = null;
            originalFormula += "_{" + varOIntervalo;
        if (jj_2_133(3)) {
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
                intervalName = token.image;
                originalFormula += "." + intervalName;
        } else {
          ;
        }
        jj_consume_token(BRA_RIGHT);
            originalFormula += "} ";
            if (intervalName != null)
                interval = new FLInterval(varOIntervalo, intervalName);
            else
                interval = new FLInterval(varOIntervalo);
      } else {
        ;
      }
      tempFormula = sentence();
    if (isDiamond)
        {if (true) return new FLDiamond(interval, tempFormula);}
    else
        {if (true) return new FLBox(interval, tempFormula);}
    } else if (jj_2_139(3)) {
      jj_consume_token(PAR_LEFT);
        originalFormula += "(";
      tempFormula = sentence();
      jj_consume_token(PAR_RIGHT);
    originalFormula += ")";
    {if (true) return tempFormula;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public FLFormula quantifier() throws ParseException {
  FLFormula tempFormula ;
  Boolean isExist;
  String variableName;
  String role = null;
    if (jj_2_140(3)) {
      jj_consume_token(EXISTS);
      isExist = true;
      originalFormula += "EXISTS(";
    } else if (jj_2_141(3)) {
      jj_consume_token(FORALL);
      originalFormula += "FORALL(";
      isExist = false;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
          variableName = token.image;
          originalFormula += variableName;
    if (jj_2_142(3)) {
      jj_consume_token(DOUBLE_DOT);
      jj_consume_token(IDENTIFIER);
          role = token.image;
          originalFormula += ":" + role;
    } else {
      ;
    }
    jj_consume_token(89);
        originalFormula += "; ";
    tempFormula = sentence();
    jj_consume_token(PAR_RIGHT);
        originalFormula += ")";
    if (isExist)
    {
      {if (true) return new FLExist(variableName, role, tempFormula );}
    }
    else
    {
      {if (true) return new FLForall(variableName, role, tempFormula);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public FLFormula terminal() throws ParseException {
    FLFormula aFormula=null;
    String name;
    String variable = null;
    FLCounter counter = null;
    int beginLine = token.next.beginLine;
    int beginColumn = token.next.beginColumn;
    ActionReferencedState referencedState = ActionReferencedState.JUST_HAPPENED;
    if (jj_2_155(3)) {
      jj_consume_token(IDENTIFIER);
            name = token.image;
            originalFormula += name;
      if (jj_2_143(3)) {
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
            variable = name;
            name = token.image;
            originalFormula += "." + name;
      } else {
        ;
      }
      if (jj_2_144(3)) {
        jj_consume_token(DOT);
        jj_consume_token(BELONGS_TO);
        jj_consume_token(IDENTIFIER);
            variable = name;
            name = token.image;
            originalFormula += ".belongsTo:" + name;
            Role tmp = rolesMap.get(name);
            if (tmp == null){
                StringBuilder sb = new StringBuilder();
                sb.append("En una f\u00f3rmula se hace referencia a un rol no definido: ('" + name + "'). " +
                    "Revisar datos del archivo de entrada, cerca de la l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                {if (true) throw new RuntimeException(sb.toString());}
            }
            {if (true) return new FLBelongs(variable, name);}
      } else {
        ;
      }
      if (jj_2_145(3)) {
        jj_consume_token(RESULTS_IN);
        jj_consume_token(IDENTIFIER);
                originalFormula += " results in " + token.image;
                Action tmp = actions.get(name);
                if (tmp == null){
                    StringBuilder sb = new StringBuilder();
                    sb.append("En una f\u00f3rmula se hace referencia a una acci\u00f3n no definida: ('" + name + "'). " +
                    "Revisar datos del archivo de entrada, cerca de la l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                    {if (true) throw new RuntimeException(sb.toString());}
                }
                {if (true) return new FLActionOutput(variable, name, token.image);}
      } else {
        ;
      }
      if (jj_2_146(3)) {
        jj_consume_token(EQUAL);
        jj_consume_token(NUMBER);
                originalFormula += " = " + token.image;
                counter = new FLCounter(variable, name, FLCounterRelation.EQUAL, new Integer(token.image));
      } else {
        ;
      }
      if (jj_2_147(3)) {
        jj_consume_token(LESS);
        jj_consume_token(NUMBER);
                originalFormula += " < " + token.image;
                counter = new FLCounter(variable, name, FLCounterRelation.LESS, new Integer(token.image));
      } else {
        ;
      }
      if (jj_2_148(3)) {
        jj_consume_token(GREATER);
        jj_consume_token(NUMBER);
                originalFormula += " > " + token.image;
                counter = new FLCounter(variable, name, FLCounterRelation.GREATER, new Integer(token.image));
      } else {
        ;
      }
      if (jj_2_149(3)) {
        jj_consume_token(LEQ);
        jj_consume_token(NUMBER);
                originalFormula += " <= " + token.image;
                counter = new FLCounter(variable, name, FLCounterRelation.LESS_OR_EQUAL, new Integer(token.image));
      } else {
        ;
      }
      if (jj_2_150(3)) {
        jj_consume_token(GEQ);
        jj_consume_token(NUMBER);
                originalFormula += " >= " + token.image;
                counter = new FLCounter(variable, name, FLCounterRelation.GREATER_OR_EQUAL, new Integer(token.image));
      } else {
        ;
      }
            if (counter != null){
                Counter tmp = counters.get(counter.getName());
                if (tmp == null){
                    StringBuilder sb = new StringBuilder();
                    sb.append("En una f\u00f3rmula se hace referencia a un contador no definido: ('" + name + "'). " +
                    "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                    {if (true) throw new RuntimeException(sb.toString());}
                }

                if (tmp.isLocal() & counter.getVariable() == null){
                    StringBuilder sb = new StringBuilder();
                    sb.append("En una f\u00f3rmula se hace referencia a un contador local sin usar agente: ('" + name + "'). " +
                        "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                    {if (true) throw new RuntimeException(sb.toString());}
                }

                if (tmp.isShared() & counter.getVariable() == null){
                    // TODO ver que hacer
                }

                if (tmp.isGlobal() & counter.getVariable() != null){
                    StringBuilder sb = new StringBuilder();
                    sb.append("En una f\u00f3rmula se hace referencia a un contador global usando agente: ('" + name + "').  " +
                        "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                    {if (true) throw new RuntimeException(sb.toString());}
                }
                {if (true) return counter;}
            }
          {if (true) return parsearFlAction(variable, name, aFormula, beginLine, beginColumn);}
    } else if (jj_2_156(3)) {
      jj_consume_token(INSIDE);
      jj_consume_token(PAR_LEFT);
      jj_consume_token(IDENTIFIER);
            String variableONombre = token.image;
            name = null;
            originalFormula += "inside (" + variableONombre;
      if (jj_2_151(3)) {
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
              name = token.image;
              originalFormula += "." + token.image;
      } else {
        ;
      }
      jj_consume_token(PAR_RIGHT);
            originalFormula += ")";
            FLInterval interval;
            if (name != null)
                interval = new FLInterval(variableONombre, name);
            else
                interval = new FLInterval(variableONombre);

            name = interval.getName();
            Interval tmp = intervals.get(name);
            if (tmp == null){
                StringBuilder sb = new StringBuilder();
                sb.append("En una f\u00f3rmula se hace referencia a un intervalo no definido: ('" + name + "'). " +
                    "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                {if (true) throw new RuntimeException(sb.toString());}
            }
            if (tmp.isLocal() & interval.getVariable() == null){
                StringBuilder sb = new StringBuilder();
                sb.append("En una f\u00f3rmula se hace referencia a un intervalo local sin usar variable: ('" + name + "'). " +
                    "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                {if (true) throw new RuntimeException(sb.toString());}
            }
            if (!tmp.isLocal() & interval.getVariable() != null){
                StringBuilder sb = new StringBuilder();
                sb.append("En una f\u00f3rmula se hace referencia a un intervalo global usando agente: ('" + name + "'). " +
                    "Revisar datos del archivo de entrada, cerca de l\u00ednea: " + beginLine + ", columna: " + beginColumn);
                {if (true) throw new RuntimeException(sb.toString());}
            }
            {if (true) return new FLInside(interval);}
    } else if (jj_2_157(3)) {
      if (jj_2_152(3)) {
        jj_consume_token(IS_HAPPENING);
        jj_consume_token(IDENTIFIER);
          referencedState = ActionReferencedState.IS_HAPPENING;
      name = token.image;
      originalFormula += "isHappening(" + name;
      } else if (jj_2_153(3)) {
        jj_consume_token(JUST_HAPPENED);
        jj_consume_token(IDENTIFIER);
          referencedState = ActionReferencedState.JUST_HAPPENED;
      name = token.image;
      originalFormula += "justHappened(" + name;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_154(3)) {
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
      variable = name;
      name = token.image;
      originalFormula += "." + name;
      } else {
        ;
      }
      jj_consume_token(PAR_RIGHT);
      originalFormula += ")";
      FLAction flAction = (FLAction) parsearFlAction(variable, name, aFormula, beginLine, beginColumn);
      flAction.setReferencedState(referencedState);
      {if (true) return flAction;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ejemplos() throws ParseException {
    String x;
    if (jj_2_158(3)) {
      jj_consume_token(IDENTIFIER);
    x = token.image;
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    System.out.println("ID.ID: " + x + ".." + token.image);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    System.out.println("   +: " +  token.image);
    } else if (jj_2_159(3)) {
      jj_consume_token(IDENTIFIER);
    String r = new String(token.image);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    x = new String(token.image);
    System.out.println("ID.ID: " + r + "." +  x);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  static private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  static private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  static private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  static private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  static private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  static private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  static private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  static private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  static private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  static private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  static private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  static private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  static private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  static private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  static private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  static private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  static private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  static private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  static private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  static private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  static private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  static private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  static private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  static private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  static private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  static private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  static private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  static private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  static private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  static private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  static private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  static private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  static private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  static private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  static private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  static private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  static private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  static private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  static private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  static private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  static private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  static private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  static private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  static private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  static private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  static private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  static private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  static private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  static private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  static private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  static private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  static private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  static private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  static private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  static private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  static private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  static private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  static private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  static private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  static private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  static private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  static private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  static private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  static private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  static private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  static private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  static private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  static private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  static private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  static private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  static private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  static private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  static private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  static private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  static private boolean jj_3_104() {
    if (jj_scan_token(EXCEPTION_OF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_103() {
    if (jj_scan_token(GIVEN_THAT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_129() {
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(SHARED_ROLE_COUNTER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_128() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(PERMISSION)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(COUNTER_BY)) return true;
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3_130()) jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(BRA_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_102() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(COUNTER_INCREASES)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_81() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ROLES_COVER)) return true;
    return false;
  }

  static private boolean jj_3_136() {
    if (jj_scan_token(ML_NOT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ROLES_DISJOINT)) return true;
    return false;
  }

  static private boolean jj_3_154() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_127() {
    if (jj_scan_token(ML_THEN)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(BRA_LEFT)) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(COUNTER_MAX_VALUE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_153() {
    if (jj_scan_token(JUST_HAPPENED)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_101() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_126() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_152() {
    if (jj_scan_token(IS_HAPPENING)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_125() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(COUNTER_MIN_VALUE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_152()) {
    jj_scanpos = xsp;
    if (jj_3_153()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_154()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(COUNTER_INIT_VALUE)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3_100() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_123() {
    if (jj_scan_token(PAR_LEFT)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_122() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_135()) {
    jj_scanpos = xsp;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) {
    jj_scanpos = xsp;
    if (jj_3_138()) {
    jj_scanpos = xsp;
    if (jj_3_139()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(ROLES)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(SHARED_ROLE_COUNTER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_99() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_151() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(GLOBAL_COUNTER)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(SHARED_COUNTER)) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_156() {
    if (jj_scan_token(INSIDE)) return true;
    if (jj_scan_token(PAR_LEFT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(LOCAL_COUNTER)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_60()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_67()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(TAG)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_98() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(OCCURRENCES)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_121() {
    if (jj_scan_token(EXCEPTION_OF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_120() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3_119() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(ONLY_OCCURS_IN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_118() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_97() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_117() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_150() {
    if (jj_scan_token(GEQ)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_116() {
    if (jj_scan_token(DOUBLE_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_149() {
    if (jj_scan_token(LEQ)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(INFINITE)) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_96() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_148() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_116()) jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_147() {
    if (jj_scan_token(LESS)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_146() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(INFINITE)) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_95() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_145() {
    if (jj_scan_token(RESULTS_IN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(GLOBAL_INTERVAL)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(LOCAL_INTERVAL)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DEFINED_BY)) return true;
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_115() {
    if (jj_scan_token(EXCEPTION_OF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(TIMER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_144() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(BELONGS_TO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_114() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3_93() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_113() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3_112() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_scan_token(COUNTER_PROVIDED)) return true;
    return false;
  }

  static private boolean jj_3_111() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(PERFORMABLE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_143() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_92() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(OCCURRENCES)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_110() {
    if (jj_scan_token(DOUBLE_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_155()) {
    jj_scanpos = xsp;
    if (jj_3_156()) {
    jj_scanpos = xsp;
    if (jj_3_157()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_155() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_143()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_144()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_146()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_149()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_150()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(COUNTER_SETS_WITH)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(ONLY_OCCURS_IN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(COUNTER_PROVIDED)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(FORALL)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_90() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_scan_token(COUNTER_SETS_WITH)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COUNTER_TO_VALUE)) return true;
    return false;
  }

  static private boolean jj_3_109() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3_108() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(COUNTER_PROVIDED)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) return true;
    }
    return false;
  }

  static private boolean jj_3_89() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(ACTIONS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(COUNTER_RESET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_142() {
    if (jj_scan_token(DOUBLE_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(COUNTER_PROVIDED)) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(COUNTER_RESET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_107() {
    if (jj_scan_token(REPAIRED_BY)) return true;
    if (jj_scan_token(PAR_LEFT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(COUNTER_MAX_IMPEDES_ACTIONS)) return true;
    return false;
  }

  static private boolean jj_3_141() {
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(FORBIDDEN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_140() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(COUNTER_MIN_IMPEDES_ACTIONS)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(DISALLOW_AUTOSYNC)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(PERFORMABLE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(ALLOW_AUTOSYNC)) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(COUNTER_PROVIDED)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_scan_token(SHARED_ROLE_SPECIFICITY)) return true;
    return false;
  }

  static private boolean jj_3_139() {
    if (jj_scan_token(PAR_LEFT)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_106() {
    if (jj_scan_token(REPAIRED_BY)) return true;
    if (jj_scan_token(PAR_LEFT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(SYNC)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(OBLIGATION)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_133() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(OCCURRENCES)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_85() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(SHARED_ROLE_COUNTER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_134() {
    if (jj_scan_token(UNDERSCORE)) return true;
    if (jj_scan_token(BRA_LEFT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(ONLY_OCCURS_IN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(COUNTER_BY)) return true;
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_105() {
    if (jj_scan_token(GIVEN_THAT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_87() {
    if (jj_scan_token(ML_OR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_132() {
    if (jj_scan_token(ML_BOX)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(PERM_PERMISSION)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_RIGHT)) return true;
    return false;
  }

  static private boolean jj_3_84() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(OUTPUT_VALUES)) return true;
    if (jj_scan_token(BRA_LEFT)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_131() {
    if (jj_scan_token(ML_DIAMOND)) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(COUNTER_DECREASES)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_134()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_159() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_86() {
    if (jj_scan_token(ML_AND)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) return true;
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(IMPERSONAL_ACTION)) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(COUNTER_PROVIDED)) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(SHARED_ROLE_SPECIFICITY)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(ACTION)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_130() {
    if (jj_scan_token(DOUBLE_DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_158() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[159];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FLParser(FLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 159; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
