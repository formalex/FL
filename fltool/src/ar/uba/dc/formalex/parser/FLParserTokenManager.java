/* Generated By:JavaCC: Do not edit this line. FLParserTokenManager.java */
package ar.uba.dc.formalex.parser;
import java.util.*;
import ar.uba.dc.formalex.fl.FLInput;
import ar.uba.dc.formalex.fl.bgtheory.*;
import ar.uba.dc.formalex.fl.bgtheory.Timer;
                                             //necesario para desambiguar
import ar.uba.dc.formalex.fl.regulation.formula.terminals.*;
import ar.uba.dc.formalex.fl.regulation.permission.*;
import ar.uba.dc.formalex.fl.regulation.rules.*;
import ar.uba.dc.formalex.fl.regulation.formula.connectors.*;
import ar.uba.dc.formalex.fl.regulation.formula.FLFormula;

/** Token Manager. */
public class FLParserTokenManager implements FLParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x200000L) != 0L)
            return 6;
         if ((active0 & 0xf0003fffffffff00L) != 0L || (active1 & 0x7feL) != 0L)
         {
            jjmatchedKind = 83;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
            return 4;
         if ((active0 & 0x80003ff7ffffff00L) != 0L || (active1 & 0x7feL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000L) != 0L)
            return 4;
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x3ef7ffff7f00L) != 0L || (active1 & 0x7eeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0xc0000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x32f7efff7f00L) != 0L || (active1 & 0x7eeL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x1400800L) != 0L)
            return 4;
         if ((active0 & 0xc0000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x28000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x3077ee9b7700L) != 0L || (active1 & 0x7eeL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x300L) != 0L || (active1 & 0x40L) != 0L)
            return 4;
         if ((active0 & 0xc0000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x28000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L || (active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x3077aa9b6400L) != 0L || (active1 & 0x78eL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x200L) != 0L)
            return 4;
         if ((active0 & 0xc0000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x28000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L || (active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x30362a8b0400L) != 0L || (active1 & 0x60eL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x810000L) != 0L || (active1 & 0x2L) != 0L)
            return 4;
         if ((active0 & 0xc0000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x28000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L || (active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L || (active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x30262a080400L) != 0L || (active1 & 0x608L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0xc0000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x302008000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x28000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L || (active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L || (active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x622080400L) != 0L || (active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0x2080400L) != 0L || (active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 9;
            return 4;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x302008000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x28000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L || (active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L || (active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x80000L) != 0L)
            return 4;
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 10;
            return 4;
         }
         if ((active0 & 0x302008000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x302008000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 11;
            return 4;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x302008000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4180106000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44001000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x300008000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4180006000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4001000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x300008000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x8000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x4000006000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x300008000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x8000240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x300008000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000020000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x240000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x600000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 7;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 59);
      case 35:
         return jjMoveStringLiteralDfa1_0(0xc0L, 0x0L);
      case 37:
         return jjStopAtPos(0, 80);
      case 38:
         return jjStopAtPos(0, 56);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 44:
         return jjStopAtPos(0, 64);
      case 45:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 52);
      case 58:
         return jjStopAtPos(0, 53);
      case 59:
         return jjStopAtPos(0, 90);
      case 60:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x4000L);
      case 61:
         return jjStopAtPos(0, 75);
      case 62:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 91:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 51);
      case 95:
         return jjStopAtPos(0, 86);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000300L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x820000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x408820000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000008000L, 0x100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100004000L, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20200010400L, 0x250L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40001000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000003c0000L, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0xc000002000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x304000400000L, 0xcL);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8082002000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10010000800L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 48);
      case 124:
         return jjStopAtPos(0, 57);
      case 125:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 61:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 93:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80010000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80380L, active1, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x30c420020000L, active1, 0xcL);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80002000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x41008800800L, active1, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x104004000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200250000L, active1, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10041409000L, active1, 0x100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x210L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x400L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 89:
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x10L);
      case 40:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 63);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x300080002040L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x640081000L, active1, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x24640080L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100004000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x8L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008800000L, active1, 0x444L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000100300L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x20L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x48001080L, active1, 0x308L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100004000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x300002000040L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4001400c00L, active1, 0x30L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x30300L, active1, 0x40L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x24000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x680002000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x80L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x400L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x6L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x12000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x240000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000240000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10100004000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x680002000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x300002000000L, active1, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x8L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x48001000L, active1, 0x104L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20030000L, active1, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800300L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 4);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x80400L, active1, 0x2L);
      case 83:
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 4);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100080L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x44001000L, active1, 0x20L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0600000000L, active1, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2080002000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000040L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000810000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10108004000L, active1, 0x100L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2080000L, active1, 0xaL);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000480L, active1, 0x80L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x4180106000L, active1, 0L);
      case 40:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(6, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(6, 72);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20004000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40040000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000280080L, active1, 0x21aL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000001000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000800000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0xa000400L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x620000000L, active1, 0x4L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000010000L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000020000L, active1, 0x4L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x180040000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0x8L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 4);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x600000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2081400L, active1, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000040L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x410L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(7, 7);
         break;
      case 84:
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x8020000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0004000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x4008000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x302008000000L, active1, 0x8L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100400L, active1, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000200000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4002000000L, active1, 0x204L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1a0000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4001000L, active1, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20040040040L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x8600000000L, active1, 0L);
      case 58:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 29);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(9, 41);
         return jjMoveStringLiteralDfa10_0(active0, 0x81000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x100400L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(9, 66);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000040L, active1, 0x600L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4200000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(9, 69);
         return jjMoveStringLiteralDfa10_0(active0, 0x6000006000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x1180000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x20400L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x208000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(10, 6);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2006000L, active1, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x6000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000201000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 19, 4);
         return jjMoveStringLiteralDfa11_0(active0, 0x4040000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x8100000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x600000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(10, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000040000L, active1, 0L);
      case 40:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(11, 73);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000020400L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x40100000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x600000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x6000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x1188000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0x300002000000L, active1, 0x10L);
      case 40:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(12, 74);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000201000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x20400L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x180000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(12, 30);
         break;
      case 83:
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(12, 37);
         return jjMoveStringLiteralDfa13_0(active0, 0x8600000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa13_0(active0, 0x6000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x6000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(13, 26);
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0x600000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x308000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(13, 12);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(13, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(13, 32);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x20400L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x600040000L, active1, 0L);
      case 70:
      case 102:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(14, 68);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x2020400L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(14, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(14, 14);
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x300000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x600000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(15, 39);
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x20400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x300000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      case 67:
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(16, 27);
         return jjMoveStringLiteralDfa17_0(active0, 0x600040000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x300000000000L);
      case 72:
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(16, 25);
         break;
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(16, 10);
         return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x300000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(17, 38);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000L);
      case 83:
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(17, 17);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x600000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x300000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x600000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000L);
      case 89:
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(18, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(19, 18);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x600000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0x300000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa21_0(active0, 0x300000000000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(20, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(20, 34);
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x300000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x300000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x300000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa25_0(active0, 0x300000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0x300000000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(25, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x300000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(27, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(27, 45);
         break;
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddTwoStates(8, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(8, 6);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(4);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 81);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffdfffffffffL & l) == 0L)
                     break;
                  kind = 82;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 82;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\56", 
"\72", "\74\76", "\133\135", "\46", "\174", "\55\76", "\41", null, null, null, null, 
"\54", null, null, null, null, null, null, null, null, null, null, "\75", "\74", 
"\76", "\74\75", "\76\75", "\45", "\45", null, null, null, "\55", "\137", null, null, 
null, "\73", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_RAW_TEXT_MODE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x4ffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[9];
static private final int[] jjstateSet = new int[18];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public FLParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public FLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 82;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[2];
static int[] jjemptyColNo = new int[2];
static boolean[] jjbeenHere = new boolean[2];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 81 :
         break;
      case 82 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[1] &&
                jjemptyLineNo[1] == input_stream.getBeginLine() &&
                jjemptyColNo[1] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[1] = input_stream.getBeginLine();
            jjemptyColNo[1] = input_stream.getBeginColumn();
            jjbeenHere[1] = true;
         }
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
